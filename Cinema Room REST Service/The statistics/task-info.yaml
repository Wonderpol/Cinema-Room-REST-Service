type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/domains/Reservation.java
  visible: true
  text: |
    package cinema.domains;

    import cinema.domains.dto.SeatDTO;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import java.util.UUID;

    @NoArgsConstructor
    @AllArgsConstructor
    @Getter
    @Setter
    public class Reservation {
        private String token;
        private SeatDTO ticket;
    }
  learner_created: true
- name: src/cinema/domains/response/ErrorResponse.java
  visible: true
  text: |
    package cinema.domains.response;

    import lombok.AllArgsConstructor;
    import lombok.Getter;

    @Getter
    @AllArgsConstructor
    public class ErrorResponse {
        private String error;
    }
  learner_created: true
- name: src/cinema/exceptions/exceptionsHandler/ControllerExceptionHandler.java
  visible: true
  text: |
    package cinema.exceptions.exceptionsHandler;

    import cinema.domains.response.ErrorResponse;
    import cinema.exceptions.SeatDoesNotExistException;
    import cinema.exceptions.TicketAlreadyPurchasedException;
    import cinema.exceptions.WrongTokenException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    @ControllerAdvice
    public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

        @ExceptionHandler(value = {SeatDoesNotExistException.class})
        public ResponseEntity<ErrorResponse> seatDoesNotExistExceptionHandler(Exception ex) {
            final ErrorResponse errorResponse = new ErrorResponse(
                    ex.getMessage()
            );

            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(value = {TicketAlreadyPurchasedException.class})
        public ResponseEntity<ErrorResponse> ticketAlreadyPurchasedException(Exception ex) {
            final ErrorResponse errorResponse = new ErrorResponse(
                    ex.getMessage()
            );

            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(value = {WrongTokenException.class})
        public ResponseEntity<ErrorResponse> wrongTokenException(Exception ex) {
            final ErrorResponse errorResponse = new ErrorResponse(
                    ex.getMessage()
            );

            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(value = Exception.class)
        public ResponseEntity<ErrorResponse> globalBaseExceptionHandler(Exception exception) {
            final ErrorResponse errorResponse = new ErrorResponse(
                    exception.getMessage()
            );
            return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }

    }
  learner_created: true
- name: src/cinema/domains/Token.java
  visible: true
  text: |
    package cinema.domains;

    import lombok.Getter;
    import lombok.NoArgsConstructor;

    import java.util.UUID;

    @Getter
    public class Token {
        private UUID token;

        public Token() {
            this.token = UUID.randomUUID();
        }

        @Override
        public String toString() {
            return String.valueOf(token);
        }
    }
  learner_created: true
- name: src/cinema/utils/Mapper.java
  visible: true
  text: |
    package cinema.utils;

    import cinema.domains.CinemaRoom;
    import cinema.domains.Seat;
    import cinema.domains.dto.CinemaRoomDTO;
    import cinema.domains.dto.SeatDTO;
    import org.springframework.stereotype.Component;

    import java.util.List;

    @Component
    public class Mapper {
        public SeatDTO toDto(Seat seat) {
            return new SeatDTO(seat.getRow(), seat.getColumn(), seat.getPrice());
        }

        public CinemaRoomDTO toDto(CinemaRoom cinemaRoom) {
            List<SeatDTO> seats = cinemaRoom.getAvailableSeats()
                    .stream()
                    .map(this::toDto)
                    .toList();

            return new CinemaRoomDTO(cinemaRoom.getTotalRows(), cinemaRoom.getTotalColumns(), seats);
        }

    }
  learner_created: true
- name: src/cinema/exceptions/WrongTokenException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class WrongTokenException extends Exception {
        public WrongTokenException() {
            super();
        }

        public WrongTokenException(final String message) {
            super(message);
        }

        public WrongTokenException(final Throwable cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/domains/Seat.java
  visible: true
  text: |
    package cinema.domains;

    import lombok.*;

    @NoArgsConstructor
    @AllArgsConstructor
    @Getter
    public class Seat {
        @NonNull
        private int row;
        @NonNull
        private int column;
        private int price;
        @Setter
        private boolean isAvailable;
    }
  learner_created: true
- name: src/cinema/repository/CinemaRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.domains.Reservation;
    import cinema.domains.Seat;
    import cinema.domains.Token;
    import cinema.domains.dto.SeatDTO;
    import cinema.exceptions.WrongTokenException;
    import org.springframework.stereotype.Repository;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.UUID;

    @Repository
    public class CinemaRepository {
        private static final int ROWS_NUMBER = 9;
        private static final int COLUMN_NUMBER = 9;
        private static final List<Seat> SEATS;
        private static final List<Reservation> RESERVATIONS;

        static  {
            SEATS = new ArrayList<>();
            RESERVATIONS = new ArrayList<>();
            for (int row = 1; row <= ROWS_NUMBER; row++) {
                for (int column = 1; column <= COLUMN_NUMBER; column++) {
                    Seat seat = new Seat(row, column, row <= 4 ? 10 : 8, true);
                    SEATS.add(seat);
                }
            }
        }

        public int getRowsNumber() {
            return ROWS_NUMBER;
        }

        public int getColumnNumber() {
            return COLUMN_NUMBER;
        }

        public List<Seat> getSeats() {
            return SEATS;
        }
        public void updateSeatAvailability(Seat seat, Seat bookedSeat) {
            SEATS.set(SEATS.indexOf(seat), bookedSeat);
        }

        public Reservation saveReservation(SeatDTO seat) {
            final Reservation reservation = new Reservation(new Token().toString(), seat);
            RESERVATIONS.add(reservation);
            return reservation;
        }

        public List<Reservation> getReservations() {
            return RESERVATIONS;
        }

        public Reservation deleteReservationByToken(Token token) throws IllegalArgumentException{
            final Reservation reservation = RESERVATIONS
                            .stream()
                            .filter(r -> r.getToken().equals(token.getToken().toString()))
                            .findAny()
                            .orElseThrow(IllegalArgumentException::new);

            RESERVATIONS.remove(reservation);

            return reservation;
        }
    }
  learner_created: true
- name: src/cinema/domains/dto/CinemaRoomDTO.java
  visible: true
  text: |
    package cinema.domains.dto;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;

    import java.util.List;

    @NoArgsConstructor
    @AllArgsConstructor
    @Getter
    public class CinemaRoomDTO {
        private int totalRows;
        private int totalColumns;
        private List<SeatDTO> availableSeats;
    }
  learner_created: true
- name: src/cinema/domains/CinemaRoom.java
  visible: true
  text: |
    package cinema.domains;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;

    import java.util.List;

    @AllArgsConstructor
    @NoArgsConstructor
    @Getter
    public class CinemaRoom {
        private int totalRows;
        private int totalColumns;
        private List<Seat> availableSeats;
    }
  learner_created: true
- name: src/cinema/domains/dto/SeatDTO.java
  visible: true
  text: |
    package cinema.domains.dto;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;

    @NoArgsConstructor
    @AllArgsConstructor
    @Getter
    public class SeatDTO {
        private int row;
        private int column;
        private int price;
    }
  learner_created: true
- name: src/cinema/exceptions/TicketAlreadyPurchasedException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class TicketAlreadyPurchasedException extends Exception {

        public TicketAlreadyPurchasedException() {
            super();
        }

        public TicketAlreadyPurchasedException(final String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/exceptions/SeatDoesNotExistException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class SeatDoesNotExistException extends Exception {
        public SeatDoesNotExistException() {
            super();
        }

        public SeatDoesNotExistException(final String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.domains.Reservation;
    import cinema.domains.Seat;
    import cinema.domains.Token;
    import cinema.domains.dto.CinemaRoomDTO;
    import cinema.domains.dto.SeatDTO;
    import cinema.exceptions.WrongTokenException;
    import cinema.service.CinemaService;
    import cinema.utils.Mapper;
    import cinema.exceptions.SeatDoesNotExistException;
    import cinema.exceptions.TicketAlreadyPurchasedException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Map;
    import java.util.UUID;

    @RestController
    public class CinemaController {

        private final CinemaService cinemaService;
        private final Mapper mapper;

        @Autowired
        public CinemaController(final CinemaService cinemaService, final Mapper mapper) {
            this.cinemaService = cinemaService;
            this.mapper = mapper;
        }

        @GetMapping("/seats")
        public CinemaRoomDTO getCinemaRoomInfo() {
           return mapper.toDto(cinemaService.getCinemaRoomInfo());
        }

        @PostMapping("/purchase")
        public ResponseEntity<Reservation> purchaseSeat(@RequestBody Seat seat) throws Exception {
            return new ResponseEntity<>(cinemaService.purchaseSeat(seat), HttpStatus.OK);
        }

        @PostMapping("/return")
        public ResponseEntity<Map<String, SeatDTO>> returnTicket(@RequestBody Token token) throws WrongTokenException {
            return new ResponseEntity<>(cinemaService.returnTicket(token), HttpStatus.OK);
        }

    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |+
    package cinema.service;

    import cinema.domains.CinemaRoom;
    import cinema.domains.Reservation;
    import cinema.domains.Seat;
    import cinema.domains.Token;
    import cinema.domains.dto.SeatDTO;
    import cinema.exceptions.WrongTokenException;
    import cinema.repository.CinemaRepository;
    import cinema.exceptions.SeatDoesNotExistException;
    import cinema.exceptions.TicketAlreadyPurchasedException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import cinema.utils.Mapper;

    import java.util.Map;
    import java.util.UUID;
    import java.util.stream.Collectors;

    @Service
    public class CinemaService {

        private final CinemaRepository cinemaRepository;
        private final Mapper mapper;

        @Autowired
        public CinemaService(final CinemaRepository cinemaRepository, final Mapper mapper) {
            this.cinemaRepository = cinemaRepository;
            this.mapper = mapper;
        }

        public CinemaRoom getCinemaRoomInfo() {
            return new CinemaRoom(
                    cinemaRepository.getRowsNumber(),
                    cinemaRepository.getColumnNumber(),
                    cinemaRepository.getSeats().stream().filter(Seat::isAvailable).collect(Collectors.toList())
            );
        }

        public Reservation purchaseSeat(Seat seat) throws TicketAlreadyPurchasedException, SeatDoesNotExistException {

            if (ifSeatDoesNotExists(seat)) {
                throw new SeatDoesNotExistException("The number of a row or a column is out of bounds!");
            }

            Seat bookedSeat =  cinemaRepository.getSeats()
                    .stream()
                    .filter(s -> s.getRow() == seat.getRow()
                            && s.getColumn() == seat.getColumn()
                            && s.isAvailable())

                    .findAny()
                    .orElseThrow(() -> new TicketAlreadyPurchasedException("The ticket has been already purchased!"));

            bookedSeat.setAvailable(false);

            return cinemaRepository.saveReservation(mapper.toDto(bookedSeat));
        }

        public Map<String, SeatDTO> returnTicket(Token token) throws WrongTokenException {
            Reservation reservation;
            try {
                reservation = cinemaRepository.deleteReservationByToken(token);
            } catch (IllegalArgumentException ex) {
                throw new WrongTokenException("Wrong token!");
            }
            return Map.of("returned_ticket", reservation.getTicket());
        }

        private boolean ifSeatDoesNotExists(Seat seat) {
            return cinemaRepository.getSeats()
                    .stream()
                    .filter(s -> s.getRow() == seat.getRow() && s.getColumn() == seat.getColumn())
                    .findAny()
                    .isEmpty();
        }
    }

  learner_created: true
- name: src/cinema/domains/Statistics.java
  visible: true
  learner_created: true
- name: src/cinema/repository/StatisticsRepository.java
  visible: true
  learner_created: true
- name: src/cinema/service/StatisticsService.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/InvalidPasswordException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 05 Oct 2022 18:52:25 UTC
record: -1
